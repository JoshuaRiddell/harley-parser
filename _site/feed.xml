<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harlie Development Tools</title>
    <description>Some quick scripts developed to help with development of Harlie&#39;s conversational abilities.
</description>
    <link>http://joshuariddell.github.io/harley-parser/</link>
    <atom:link href="http://joshuariddell.github.io/harley-parser/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 18 Dec 2015 19:42:34 +1000</pubDate>
    <lastBuildDate>Fri, 18 Dec 2015 19:42:34 +1000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Conversation Tree</title>
        <description>&lt;p&gt;Type your &lt;code class=&quot;highlighter-rouge&quot;&gt;conversation tree&lt;/code&gt; into the top box and see the generated code below. When you are happy with your conversation, use the form at the bottom to submit to us!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;

var HEADER = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;aiml version=\&quot;1.0\&quot;&gt;\n\n&lt;!-- { topic } topic --&gt;\n\n&quot;;
var CATEGORY = &quot;&lt;category&gt;\n{ args }\n&lt;/category&gt;\n\n&quot;;

var CAT_ARGS = [
    &quot;   &lt;pattern&gt; { args } &lt;/pattern&gt;\n&quot;,
    &quot;   &lt;that&gt; { args } &lt;/that&gt;\n&quot;,
    &quot;   &lt;template&gt; { args } &lt;/template&gt;&quot;
];

var CODE_OUTPUT_CACHE = &quot;&quot;;

document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    userInput = document.getElementById(&#39;userInput&#39;);
    codeOutput = document.getElementById(&#39;codeOutput&#39;);

    userInput.addEventListener(&#39;keyup&#39;, function() {
    	updateCode();
    })

    userInput.addEventListener(&#39;keydown&#39;, allowTabbing)
    codeOutput.addEventListener(&#39;keydown&#39;, allowTabbing)
});

var allowTabbing = function(e) {
	// allow the user to tab indent in text areas.
	if (e.keyCode == 9 || e.which == 9) {
		e.preventDefault();
		var start = this.selectionStart;
		this.value = this.value.substring(0,this.selectionStart) +
					 &quot;\t&quot; +
					 this.value.substring(this.selectionEnd);
		this.selectionEnd = start + 1;
	}
}

var updateCode = function() {
	var lineList = userInput.value.split(&quot;\n&quot;)
	for (var i=0; i &lt; lineList.length; i++) {
		if (lineList[i].trim() == &quot;&quot;) {
			lineList.splice(i, 1);
			i--;
		}
	}
	var topic = &quot;topic&quot;;
	CODE_OUTPUT_CACHE = HEADER.replace(&quot;{ topic }&quot;, topic);
	var initialStatement = lineList.splice(0, 1);
	CODE_OUTPUT_CACHE += 
	makeAiml(initialStatement, lineList);
	codeOutput.value = CODE_OUTPUT_CACHE;
}

var makeAiml = function(that, lineList) {
	var last = lineList.length;
	if (last &gt;= 2) {
		var pattern = lineList[0].trim();
		var template = lineList[1].trim();

		CODE_OUTPUT_CACHE += makeCategory(pattern, that, template);

		var space = getIndent(lineList[0]);
		for (var i=2; i &lt; lineList.length; i++) {
			if (space == getIndent(lineList[i])) {
				last = i;
			}
		}
		lineList.splice(0, 2);
		makeAiml(template, lineList.splice(0, last));
		return makeAiml(that, lineList)
	}
}

var getIndent = function(string) {
	return string.length - string.replace(/^\s+/, &quot;&quot;).length;
}

var makeCategory = function(pattern, that, template) {
	var category = CATEGORY;
	args = &quot;&quot;;

	var argList = [pattern, that, template];
	for (var i=0; i &lt; argList.length; i++) {
		if (!argList[i] == &quot;&quot;) {
			args += CAT_ARGS[i].replace(&quot;{ args }&quot;, argList[i].trim())
		}
	}
	category = category.replace(&quot;{ args }&quot;, args);
	return category
}

function inputFocus(i) {
	if (i.value == i.defaultValue) {
		i.value = &quot;&quot;;
		i.style.color = &quot;#000&quot;;
	}
}

function inputBlur(i) {
	if (i.value == &quot;&quot;) {
		i.value = i.defaultValue;
		i.style.color = &quot;#888&quot;;
	}
}

function validateTopic(i) {
	var newVal = i.value.trim();
	newVal = newVal.replace(/\s+[a-z]/g, function(match) {
		return match.trim().toUpperCase();
	});
	newVal = newVal.replace(/\s^/, &quot;&quot;);
	i.value = newVal;
}

&lt;/script&gt;

&lt;h4&gt; Conversation Tree &lt;/h4&gt;

&lt;p&gt;&lt;input type=&quot;text&quot; class=&quot;user-input-blur&quot; id=&quot;topic&quot; value=&quot;Topic Name&quot; onfocus=&quot;inputFocus(this)&quot; onblur=&quot;inputBlur(this); validateTopic(this)&quot; /&gt;&lt;/p&gt;

&lt;textarea id=&quot;userInput&quot; class=&quot;user-input-textarea&quot;&gt;Hello, what is your favourite robot?
	*
		Wow, that is a cool robot! My favourite is Asimo. What do you like about your robot?
			*
				I can see why you like it, that sounds very cool.
	$DONT KNOW
		That&#39;s okay, my favourite is Opie. We can talk about something else.&lt;/textarea&gt;

&lt;h4&gt; AIML Output &lt;/h4&gt;

&lt;textarea id=&quot;codeOutput&quot; class=&quot;user-input-textarea&quot; value=&quot;&quot;&gt;&lt;/textarea&gt;

&lt;h4&gt; Submission &lt;/h4&gt;
&lt;p&gt;
This is where the submission form will go.
&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2015 21:58:03 +1000</pubDate>
        <link>http://joshuariddell.github.io/harley-parser/conversation-tree</link>
        <guid isPermaLink="true">http://joshuariddell.github.io/harley-parser/conversation-tree</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
